name: CD - Deploy to EC2 (Blue-Green)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.determine_tag.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        working-directory: ./backend

      - name: Build Spring Boot JAR (without tests)
        run: ./gradlew bootJar -x test
        working-directory: ./backend

      - name: Determine Image Tag (SHA7)
        id: determine_tag
        run: echo "tag=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Build & Push Docker Image
        env:
          ECR_REGISTRY:   ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG:      ${{ steps.determine_tag.outputs.tag }}
        run: |
          docker build \
            -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" \
            ./backend --build-arg JAR_FILE=build/libs/*.jar
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy-blue-green:
    name: Deploy to EC2 (Blue-Green)
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: SSH & Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.EC2_HOST }}
          username: ubuntu
          key:      ${{ secrets.EC2_SSH_KEY }}
          port:     22
          script_stop: true
          script: |
            set -euo pipefail

            export ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
            export ECR_REPOSITORY=${{ secrets.ECR_REPOSITORY }}
            export IMAGE_TAG=${{ needs.build-and-push.outputs.image_tag }}
            export APP_DIR="/home/ubuntu/app"
            export AWS_REGION=${{ secrets.AWS_REGION }}

            # AWS 로그인
            aws ecr get-login-password --region "$AWS_REGION" \
              | docker login --username AWS --password-stdin "$ECR_REGISTRY"

            cd "$APP_DIR"

            # 서비스 감지
            if [ -n "$(docker ps -q -f name=backend-blue)" ]; then
              CURRENT=backend-blue; TARGET=backend-green; PORT=8081
            else
              CURRENT=backend-green; TARGET=backend-blue; PORT=8080
            fi

            echo "⏳ Switching from $CURRENT to $TARGET …"

            # .env 생성
            rm -f .env
            echo "RDS_ENDPOINT=${{ secrets.RDS_ENDPOINT }}" >> .env
            echo "RDS_PORT=${{ secrets.RDS_PORT }}" >> .env
            echo "RDS_DATABASE=${{ secrets.RDS_DATABASE }}" >> .env
            echo "RDS_USERNAME=${{ secrets.RDS_USERNAME }}" >> .env
            echo "RDS_PASSWORD=${{ secrets.RDS_PASSWORD }}" >> .env
            echo "ELASTICACHE_ENDPOINT=${{ secrets.ELASTICACHE_ENDPOINT }}" >> .env
            echo "ELASTICACHE_PORT=${{ secrets.ELASTICACHE_PORT }}" >> .env
            echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
            echo "JWT_EXPIRATION_TIME=${{ secrets.JWT_EXPIRATION_TIME }}" >> .env

            # Compose 변수
            echo "ECR_REGISTRY=$ECR_REGISTRY" >> .env
            echo "ECR_REPOSITORY=$ECR_REPOSITORY" >> .env
            echo "IMAGE_TAG=$IMAGE_TAG" >> .env

            # 새 이미지 pull
            docker pull "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

            # 기존 컨테이너 중지·제거
            if [ -n "$(docker ps -q -f name=$CURRENT)" ]; then
              docker-compose -f docker-compose-prod.yml stop "$CURRENT"
              docker-compose -f docker-compose-prod.yml rm -f "$CURRENT"
            fi

            # 새 컨테이너 배포
            export $(cat .env | xargs)
            docker-compose -f docker-compose-prod.yml --env-file .env \
              up -d --no-deps "$TARGET"

            # Nginx 트래픽 스위칭
            echo "set \$service_url http://$TARGET:$PORT;" \
              | sudo tee service-env.inc

            if [ -z "$(docker ps -q -f name=nginx-proxy)" ]; then
              docker-compose -f docker-compose-prod.yml up -d nginx
            fi

            docker exec nginx-proxy nginx -s reload

            echo "✅ Deployed $TARGET (image:$IMAGE_TAG); stopped $CURRENT."
