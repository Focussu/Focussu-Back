name: CD - Deploy to EC2 (Blue-Green)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.determine_tag.outputs.tag }}
      next_color: ${{ steps.decide_color.outputs.next }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        working-directory: ./backend

      - name: Build Spring Boot JAR (without tests)
        run: ./gradlew bootJar -x test
        working-directory: ./backend

      - name: Determine Image Tag
        id: determine_tag
        run: echo "tag=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Decide blue or green
        id: decide_color
        run: |
          CURRENT=$(curl -s http://${{ secrets.EC2_HOST }}/env | grep backend-blue && echo blue || echo green)
          if [ "$CURRENT" = "blue" ]; then
            echo "next=green" >> $GITHUB_OUTPUT
          else
            echo "next=blue" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.determine_tag.outputs.tag }}
          COLOR_TAG: ${{ steps.decide_color.outputs.next }}
          ECR_REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY }}
        run: |
          docker build -t "$ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG" ./backend \
            --build-arg JAR_FILE=build/libs/*.jar
          docker tag "$ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG" "$ECR_REGISTRY/$ECR_REPOSITORY_NAME:$COLOR_TAG"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY_NAME:$COLOR_TAG"

  deploy-blue-green:
    name: Deploy to EC2 (Blue-Green)
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: SSH deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script_stop: true
          script: |
            export ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
            export ECR_REPOSITORY=${{ secrets.ECR_REPOSITORY }}
            export IMAGE_TAG=${{ needs.build-and-push.outputs.image_tag }}
            export COLOR_TAG=${{ needs.build-and-push.outputs.next_color }}
            export APP_DIR="/home/ubuntu/app"
            export AWS_REGION=${{ secrets.AWS_REGION }}

            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

            cd $APP_DIR
            if [ "$COLOR_TAG" = "blue" ]; then
              TARGET_SERVICE="backend-blue"
              TARGET_PORT="8080"
              CURRENT_SERVICE="backend-green"
            else
              TARGET_SERVICE="backend-green"
              TARGET_PORT="8081"
              CURRENT_SERVICE="backend-blue"
            fi

            echo "Creating .env file..."
            echo "RDS_ENDPOINT=${{ secrets.RDS_ENDPOINT }}" > $APP_DIR/.env
            echo "RDS_PORT=${{ secrets.RDS_PORT }}" >> $APP_DIR/.env
            echo "RDS_DATABASE=${{ secrets.RDS_DATABASE }}" >> $APP_DIR/.env
            echo "RDS_USERNAME=${{ secrets.RDS_USERNAME }}" >> $APP_DIR/.env
            echo "RDS_PASSWORD=${{ secrets.RDS_PASSWORD }}" >> $APP_DIR/.env
            echo "ELASTICACHE_ENDPOINT=${{ secrets.ELASTICACHE_ENDPOINT }}" >> $APP_DIR/.env
            echo "ELASTICACHE_PORT=${{ secrets.ELASTICACHE_PORT }}" >> $APP_DIR/.env
            echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> $APP_DIR/.env
            echo "JWT_EXPIRATION_TIME=${{ secrets.JWT_EXPIRATION_TIME }}" >> $APP_DIR/.env
            echo "ECR_REGISTRY=$ECR_REGISTRY" >> $APP_DIR/.env
            echo "ECR_REPOSITORY=$ECR_REPOSITORY" >> $APP_DIR/.env

            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$COLOR_TAG

            if docker ps -a | grep -q "$TARGET_SERVICE"; then
              docker-compose -f $APP_DIR/docker-compose-prod.yml stop $TARGET_SERVICE
              docker-compose -f $APP_DIR/docker-compose-prod.yml rm -f $TARGET_SERVICE
            fi

            export $(cat $APP_DIR/.env | xargs)
            docker-compose -f $APP_DIR/docker-compose-prod.yml --env-file $APP_DIR/.env up -d --no-deps $TARGET_SERVICE

            echo "Waiting for health check..."
            for i in {1..30}; do
              response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:$TARGET_PORT/test/health-check)
              if [ "$response" = "200" ]; then
                echo "Healthy!"; break
              fi
              echo "Attempt $i failed ($response). Retrying..."
              sleep 10
              if [ "$i" -eq 30 ]; then
                echo "Health check failed. Aborting."; exit 1
              fi
            done

            echo "Switching Nginx traffic..."
            echo "set \$service_url http://$TARGET_SERVICE:$TARGET_PORT;" | sudo tee $APP_DIR/service-env.inc

            if docker ps -a --format '{{.Names}}' | grep -q "^nginx-proxy$"; then
              if ! docker ps --format '{{.Names}}' | grep -q "^nginx-proxy$"; then
                docker-compose -f $APP_DIR/docker-compose-prod.yml up -d nginx
              fi
            else
              docker-compose -f $APP_DIR/docker-compose-prod.yml up -d nginx
            fi

            docker exec nginx-proxy nginx -s reload
            docker-compose -f $APP_DIR/docker-compose-prod.yml stop $CURRENT_SERVICE
            docker image prune -af
            echo "Deployment Completed!"
