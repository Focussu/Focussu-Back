# docker-compose-prod.yml
version: '3.8'

services:
  # --- Blue 인스턴스 ---
  backend-blue:
    # image: <YOUR_ECR_REGISTRY_URI>/focussu-backend:blue # CI/CD 파이프라인에서 동적으로 설정됨
    image: ${ECR_REGISTRY}/${ECR_REPOSITORY}:blue # 환경변수 사용
    container_name: backend-blue
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      # 아래 값들은 EC2의 .env 파일에서 로드됨
      SPRING_DATASOURCE_URL: jdbc:mysql://${RDS_ENDPOINT}:3306/${DB_NAME}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul
      SPRING_DATASOURCE_USERNAME: ${RDS_USER}
      SPRING_DATASOURCE_PASSWORD: ${RDS_PASSWORD}
      SPRING_REDIS_HOST: ${ELASTICACHE_ENDPOINT}
      SPRING_REDIS_PORT: 6379
      SERVER_PORT: 8080
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"] # Actuator 필요
      interval: 15s # 간격 조정
      timeout: 10s # 타임아웃 조정
      retries: 5
      start_period: 60s # 시작 시간 넉넉하게
    restart: always

  # --- Green 인스턴스 ---
  backend-green:
    image: ${ECR_REGISTRY}/${ECR_REPOSITORY}:green
    container_name: backend-green
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:mysql://${RDS_ENDPOINT}:3306/${DB_NAME}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul
      SPRING_DATASOURCE_USERNAME: ${RDS_USER}
      SPRING_DATASOURCE_PASSWORD: ${RDS_PASSWORD}
      SPRING_REDIS_HOST: ${ELASTICACHE_ENDPOINT}
      SPRING_REDIS_PORT: 6379
      SERVER_PORT: 8081
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/actuator/health || exit 1"] # Actuator 필요
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: always

  # --- Nginx 리버스 프록시 ---
  nginx:
    image: nginx:stable-alpine
    container_name: nginx-proxy
    ports:
      - "80:80" # HTTP
      # - "443:443" # HTTPS (나중에 설정 시)
    volumes:
      # nginx.conf를 EC2의 /home/ubuntu/app/nginx.conf 와 동기화
      - /home/ubuntu/app/nginx.conf:/etc/nginx/nginx.conf:ro # 읽기 전용 마운트
      # service-env.inc를 EC2의 /home/ubuntu/app/service-env.inc 와 동기화
      - /home/ubuntu/app/service-env.inc:/etc/nginx/conf.d/service-env.inc:ro # 읽기 전용 마운트
    depends_on:
      backend-blue:
        condition: service_started # healthcheck 기다리지 않음
      backend-green:
        condition: service_started # healthcheck 기다리지 않음
    restart: always

networks:
  default:
    driver: bridge
